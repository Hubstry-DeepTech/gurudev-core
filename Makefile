# Makefile para Alexandria: Biblioteca de Interoperabilidade e Programa√ß√£o Comparada

.PHONY: help install install-dev test lint format clean build docs run-example

# Vari√°veis
PYTHON = python3
PIP = pip3
PROJECT_NAME = alexandria-lang
VERSION = 0.1.0

# Cores para output
RED = \033[0;31m
GREEN = \033[0;32m
YELLOW = \033[1;33m
BLUE = \033[0;34m
NC = \033[0m # No Color

help: ## Mostra esta ajuda
	@echo "$(BLUE)üèõÔ∏è Alexandria: Biblioteca de Interoperabilidade e Programa√ß√£o Comparada$(NC)"
	@echo "$(YELLOW)Comandos dispon√≠veis:$(NC)"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(GREEN)%-15s$(NC) %s\n", $$1, $$2}'

install: ## Instala a biblioteca em modo desenvolvimento
	@echo "$(BLUE)üì¶ Instalando Alexandria em modo desenvolvimento...$(NC)"
	$(PIP) install -e .
	@echo "$(GREEN)‚úÖ Instala√ß√£o conclu√≠da!$(NC)"

install-dev: ## Instala depend√™ncias de desenvolvimento
	@echo "$(BLUE)üîß Instalando depend√™ncias de desenvolvimento...$(NC)"
	$(PIP) install -e ".[dev]"
	@echo "$(GREEN)‚úÖ Depend√™ncias de desenvolvimento instaladas!$(NC)"

test: ## Executa os testes
	@echo "$(BLUE)üß™ Executando testes...$(NC)"
	pytest tests/ -v --cov=alexandria --cov-report=html --cov-report=term
	@echo "$(GREEN)‚úÖ Testes conclu√≠dos!$(NC)"

test-quick: ## Executa testes rapidamente (sem coverage)
	@echo "$(BLUE)‚ö° Executando testes r√°pidos...$(NC)"
	pytest tests/ -v
	@echo "$(GREEN)‚úÖ Testes r√°pidos conclu√≠dos!$(NC)"

lint: ## Executa verifica√ß√£o de c√≥digo
	@echo "$(BLUE)üîç Verificando c√≥digo...$(NC)"
	flake8 alexandria/ tests/ --max-line-length=88 --ignore=E203,W503
	mypy alexandria/ --ignore-missing-imports
	@echo "$(GREEN)‚úÖ Verifica√ß√£o de c√≥digo conclu√≠da!$(NC)"

format: ## Formata o c√≥digo
	@echo "$(BLUE)üé® Formatando c√≥digo...$(NC)"
	black alexandria/ tests/ --line-length=88
	isort alexandria/ tests/ --profile=black
	@echo "$(GREEN)‚úÖ Formata√ß√£o conclu√≠da!$(NC)"

clean: ## Limpa arquivos tempor√°rios
	@echo "$(BLUE)üßπ Limpando arquivos tempor√°rios...$(NC)"
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -delete
	find . -type d -name "*.egg-info" -exec rm -rf {} +
	find . -type d -name ".pytest_cache" -exec rm -rf {} +
	find . -type d -name ".mypy_cache" -exec rm -rf {} +
	rm -rf build/ dist/ htmlcov/ .coverage
	@echo "$(GREEN)‚úÖ Limpeza conclu√≠da!$(NC)"

build: ## Constr√≥i o pacote
	@echo "$(BLUE)üî® Construindo pacote...$(NC)"
	$(PYTHON) -m build
	@echo "$(GREEN)‚úÖ Constru√ß√£o conclu√≠da!$(NC)"

docs: ## Gera documenta√ß√£o
	@echo "$(BLUE)üìö Gerando documenta√ß√£o...$(NC)"
	cd docs && make html
	@echo "$(GREEN)‚úÖ Documenta√ß√£o gerada!$(NC)"

run-example: ## Executa o exemplo b√°sico
	@echo "$(BLUE)üöÄ Executando exemplo b√°sico...$(NC)"
	$(PYTHON) examples/basic_usage.py
	@echo "$(GREEN)‚úÖ Exemplo executado!$(NC)"

check: ## Executa todas as verifica√ß√µes
	@echo "$(BLUE)üîç Executando todas as verifica√ß√µes...$(NC)"
	$(MAKE) format
	$(MAKE) lint
	$(MAKE) test
	@echo "$(GREEN)‚úÖ Todas as verifica√ß√µes conclu√≠das!$(NC)"

release: ## Prepara release (formata, testa, constr√≥i)
	@echo "$(BLUE)üöÄ Preparando release...$(NC)"
	$(MAKE) clean
	$(MAKE) format
	$(MAKE) lint
	$(MAKE) test
	$(MAKE) build
	@echo "$(GREEN)‚úÖ Release preparado!$(NC)"

install-cli: ## Instala o CLI globalmente
	@echo "$(BLUE)üì¶ Instalando CLI globalmente...$(NC)"
	$(PIP) install -e . --force-reinstall
	@echo "$(GREEN)‚úÖ CLI instalado! Use 'alexandria --help' para ver os comandos$(NC)"

demo: ## Executa demonstra√ß√£o completa
	@echo "$(BLUE)üé≠ Executando demonstra√ß√£o completa...$(NC)"
	@echo "$(YELLOW)1. Listando linguagens dispon√≠veis:$(NC)"
	alexandria list-languages
	@echo "$(YELLOW)2. Comparando Python e Rust:$(NC)"
	alexandria compare --source Python --target Rust
	@echo "$(YELLOW)3. Mapeando tipos Python para Rust:$(NC)"
	alexandria map-types --source python --target rust
	@echo "$(GREEN)‚úÖ Demonstra√ß√£o conclu√≠da!$(NC)"

# Comandos espec√≠ficos para desenvolvimento
dev-setup: ## Configura√ß√£o completa para desenvolvimento
	@echo "$(BLUE)‚öôÔ∏è Configurando ambiente de desenvolvimento...$(NC)"
	$(MAKE) install-dev
	$(MAKE) install-cli
	$(MAKE) run-example
	@echo "$(GREEN)‚úÖ Ambiente de desenvolvimento configurado!$(NC)"

# Comandos para CI/CD
ci: ## Comandos para CI/CD
	@echo "$(BLUE)üîÑ Executando pipeline CI/CD...$(NC)"
	$(MAKE) format
	$(MAKE) lint
	$(MAKE) test
	$(MAKE) build
	@echo "$(GREEN)‚úÖ Pipeline CI/CD conclu√≠do!$(NC)"

# Comandos para an√°lise
analyze: ## An√°lise est√°tica do c√≥digo
	@echo "$(BLUE)üî¨ An√°lise est√°tica do c√≥digo...$(NC)"
	bandit -r alexandria/ -f json -o bandit-report.json || true
	safety check || true
	@echo "$(GREEN)‚úÖ An√°lise est√°tica conclu√≠da!$(NC)"

# Comandos para documenta√ß√£o
docs-serve: ## Serve documenta√ß√£o localmente
	@echo "$(BLUE)üåê Servindo documenta√ß√£o localmente...$(NC)"
	cd docs/_build/html && python -m http.server 8000
	@echo "$(GREEN)‚úÖ Documenta√ß√£o dispon√≠vel em http://localhost:8000$(NC)"

# Comandos para dados
update-languages: ## Atualiza dados de linguagens
	@echo "$(BLUE)üìä Atualizando dados de linguagens...$(NC)"
	$(PYTHON) -c "from alexandria.core.analyzer import LanguageAnalyzer; analyzer = LanguageAnalyzer(); print(f'Linguagens carregadas: {len(analyzer.list_languages())}')"
	@echo "$(GREEN)‚úÖ Dados de linguagens atualizados!$(NC)"

# Comandos para benchmark
benchmark: ## Executa benchmarks
	@echo "$(BLUE)‚ö° Executando benchmarks...$(NC)"
	$(PYTHON) -m pytest tests/ -m benchmark -v || echo "$(YELLOW)‚ö†Ô∏è Nenhum benchmark encontrado$(NC)"
	@echo "$(GREEN)‚úÖ Benchmarks conclu√≠dos!$(NC)" 